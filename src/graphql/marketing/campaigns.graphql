#Marketing\Campaign Related APIs
extend type Query @guard {
    
    campaigns(input: FilterCampaignInput @builder(method: "Webkul\\GraphQLAPI\\Queries\\Marketing\\FilterCampaign")): [Event!] @paginate(type: "paginator" defaultCount: 10 model:"Webkul\\Marketing\\Models\\Campaign")
    
    campaign(id: ID @eq): Campaign @find(model: "Webkul\\Marketing\\Models\\Campaign")
}

extend type Mutation @guard {

    createEvent(
        input: CreateCampaignInput!
    ): Event  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Marketing\\CampaignMutation@store")
    
    updateEvent(
        id: ID!,
        input: CreateCampaignInput!
    ): Event  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Marketing\\CampaignMutation@update")
    
    deleteEvent (id: ID!): Event  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Marketing\\CampaignMutation@delete")
}


input FilterCampaignInput {
    id: ID
    name: String
    subject: String
    event: String
    emailTemplate: String
    channel: Int
    customerGroup: String
}

input CreateCampaignInput {
    name: String
    subject: String
    channelId: Int @rename(attribute: "channel_id")
    customerGroupId: Int  @rename(attribute: "customer_group_id")
    eventId: Int @rename(attribute: "marketing_event_id")
    emailTemplateId: Int  @rename(attribute: "marketing_template_id")
}

type Campaign {
    id: ID!
    name: String!
    subject: String!
    status: String!
    channel: Channel @belongsTo(relation: "channel")
    customerGroup: CustomerGroup @belongsTo(relation: "customer_group")
    emailTemplate: EmailTemplate @belongsTo(relation: "email_template")
    event: Event @belongsTo(relation: "event")
}
