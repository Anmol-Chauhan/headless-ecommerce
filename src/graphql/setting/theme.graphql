# Setting\User Related APIs
extend type Query @guard(with: ["admin-api"]){
    themes(input: FilterUserInput @builder(method: "Webkul\\GraphQLAPI\\Queries\\Setting\\FilterTheme")): [Theme!] @paginate(type: "PAGINATOR" defaultCount:10 model: "Webkul\\Shop\\Models\\ThemeCustomization")

    theme(id: ID @eq): Theme @find(model: "Webkul\\Shop\\Models\\ThemeCustomization")
}

extend type Mutation {
    createTheme(
        input: CreateThemeInput!
    ): Theme @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Setting\\ThemeMutation@store")

    updateTheme(
        id: ID!,
        input: UpdateThemeInput!
    ): Theme @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Setting\\ThemeMutation@update")
    
    # deleteUser(id: ID!): User @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Setting\\UserMutation@delete")
}

input CreateThemeInput {
    name: String!
    sortOrder: Int! @rename(attribute: "sort_order")
    type: String!
    channelId: ID! @rename(attribute: "channel_id")
    status: Boolean
}

input UpdateThemeInput {
    name: String!
    sortOrder: Int! @rename(attribute: "sort_order")
    type: String!
    channelId: ID! @rename(attribute: "channel_id")
    status: Boolean
    options:[FiltersInput!]
}

# input CreateUserLoginInput {
#     email: String! @rules(apply: ["email"])
#     password: String! @rules(apply: ["min:6"])
#     remember: Boolean
# }

# input FilterUserInput {
#     id: Int
#     channelName: String
#     name: String
#     type: String
#     sortOrder: String
#     status: Boolean
# }


type Theme {
    id: ID!
    type: String
    sortOrder: Int  @rename(attribute: "sort_order")
    channelId: ID @rename(attribute: "channel_id")
    channelName: String @rename(attribute: "channel_name")
    status: Boolean
    name: String
    options:String
}

input FiltersInput {
    sort: String!
    limit: String!
}